%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_PrefabParentObject: {fileID: 0}
  m_PrefabInternal: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: c34f708b8ae5f924bb9271d7ad2d8f9f, type: 3}
  m_Name: ExampleScenario
  m_EditorClassIdentifier: Assembly-CSharp::EditorScenario
  scenes:
  - name: color1
    background: color:red
    ending: 
    events:
    - time: 3
      action: color2
      title: 
      options: []
  - name: color2
    background: color:green
    ending: 
    events:
    - time: 3
      action: restart
      title: 
      options: []
  - name: restart
    background: bg.png
    ending: 
    events:
    - time: 0
      action: 
      title: Restart?
      options:
      - image: restart.png
        text: Yes
        action: color1
      - image: stop.png
        text: No
        action: exit
  images:
  - name: restart.png
    image: {fileID: 2800000, guid: b12f5cfb74b9eb94387f1b4153d4b93a, type: 3}
  - name: stop.png
    image: {fileID: 2800000, guid: e4365460c6c9e114397e10f1c9780d05, type: 3}
  - name: bg.png
    image: {fileID: 2800000, guid: 31b478e38e98d0246979ba9855a58268, type: 3}
  instructions: 'HOW TO CREATE SCENARIOS

    ===================


    1. About Scenarios

    Each scenario has its own folder. In this folder all videos, images, scenes and
    logs are saved.

    Each scenario may contain multiple scenes. These scenes are saved in .json files
    (if multiple .json files are found in the folder all files will be read).


    2. About Scenes

    Scenes are the main buildingblocks for scenarios. The scenario begins with the
    first scene (the topmost scene in the first file) and progresses through the scenes
    until an end is reached. Each scene may define a background and multiple progressions
    or interactions.


    3. Configuration

    As mentioned above, each scenario is configured with .json files. With these instructions
    an example .json file (scenes.json) should also have been generated, that file
    could be used as a base other scenarios. Here I will explain how to customise
    different parts of a scenario.


    3.1 JSON

    The json format is quite simple. Each "object" is surrounded with ''{}''. All
    objects can have many variables. All variables starts with a name (inside "")
    followed with a colon (:) and the value. The values can be one of the following
    types:

    Text values (surrounded by "")

    Number values

    Other objects (surrounded by {})

    Lists (surrounded by [])

    Between the variables and elements of lists are commas (,). Please see the example
    file for refrence (spaces are optional but helps readability).


    3.2 Scene Configuration

    Each scenario .json-file contains a list of scenes. '
